// Code generated by mockery v2.14.0. DO NOT EDIT.

package am

import mock "github.com/stretchr/testify/mock"

// MockMessageSubscriber is an autogenerated mock type for the MessageSubscriber type
type MockMessageSubscriber[I IncomingMessage] struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: topicName, handler, options
func (_m *MockMessageSubscriber[I]) Subscribe(topicName string, handler MessageHandler[I], options ...SubscriberOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, topicName, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, MessageHandler[I], ...SubscriberOption) error); ok {
		r0 = rf(topicName, handler, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockMessageSubscriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockMessageSubscriber creates a new instance of MockMessageSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMessageSubscriber[I IncomingMessage](t mockConstructorTestingTNewMockMessageSubscriber) *MockMessageSubscriber[I] {
	mock := &MockMessageSubscriber[I]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
