// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: depotpb/api.proto

package depotpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepotServiceClient is the client API for DepotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepotServiceClient interface {
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	SelectShoppingList(ctx context.Context, in *SelectShoppingListRequest, opts ...grpc.CallOption) (*SelectShoppingListResponse, error)
}

type depotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepotServiceClient(cc grpc.ClientConnInterface) DepotServiceClient {
	return &depotServiceClient{cc}
}

func (c *depotServiceClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error) {
	out := new(SubmitOrderResponse)
	err := c.cc.Invoke(ctx, "/depotpb.DepotService/SubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depotServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/depotpb.DepotService/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depotServiceClient) SelectShoppingList(ctx context.Context, in *SelectShoppingListRequest, opts ...grpc.CallOption) (*SelectShoppingListResponse, error) {
	out := new(SelectShoppingListResponse)
	err := c.cc.Invoke(ctx, "/depotpb.DepotService/SelectShoppingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepotServiceServer is the server API for DepotService service.
// All implementations must embed UnimplementedDepotServiceServer
// for forward compatibility
type DepotServiceServer interface {
	SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	SelectShoppingList(context.Context, *SelectShoppingListRequest) (*SelectShoppingListResponse, error)
	mustEmbedUnimplementedDepotServiceServer()
}

// UnimplementedDepotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepotServiceServer struct {
}

func (UnimplementedDepotServiceServer) SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (UnimplementedDepotServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedDepotServiceServer) SelectShoppingList(context.Context, *SelectShoppingListRequest) (*SelectShoppingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectShoppingList not implemented")
}
func (UnimplementedDepotServiceServer) mustEmbedUnimplementedDepotServiceServer() {}

// UnsafeDepotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepotServiceServer will
// result in compilation errors.
type UnsafeDepotServiceServer interface {
	mustEmbedUnimplementedDepotServiceServer()
}

func RegisterDepotServiceServer(s grpc.ServiceRegistrar, srv DepotServiceServer) {
	s.RegisterService(&DepotService_ServiceDesc, srv)
}

func _DepotService_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServiceServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depotpb.DepotService/SubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServiceServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepotService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depotpb.DepotService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepotService_SelectShoppingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectShoppingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepotServiceServer).SelectShoppingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/depotpb.DepotService/SelectShoppingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepotServiceServer).SelectShoppingList(ctx, req.(*SelectShoppingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepotService_ServiceDesc is the grpc.ServiceDesc for DepotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "depotpb.DepotService",
	HandlerType: (*DepotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitOrder",
			Handler:    _DepotService_SubmitOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _DepotService_CancelOrder_Handler,
		},
		{
			MethodName: "SelectShoppingList",
			Handler:    _DepotService_SelectShoppingList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depotpb/api.proto",
}
