version: "3.8"

services:
  baskets:
    container_name: baskets
    hostname: baskets
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: baskets
    ports:
      - '8081:8081'
    expose:
      - '9000'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8081'
      RPC_PORT: ':9000'
      RPC_SERVICES: 'STORES=stores:9009,CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=baskets user=baskets_user password=baskets_pass search_path=baskets,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  cosec:
    container_name: cosec
    hostname: cosec
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: cosec
    environment:
      ENVIRONMENT: development
      PG_CONN: host=postgres dbname=cosec user=cosec_user password=cosec_pass search_path=cosec,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  customers:
    container_name: customers
    hostname: customers
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: customers
    ports:
      - '8082:8082'
    expose:
      - '9001'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8082'
      RPC_PORT: ':9001'
      PG_CONN: host=postgres dbname=customers user=customers_user password=customers_pass search_path=customers,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  depot:
    container_name: depot
    hostname: depot
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: depot
    ports:
      - '8083:8083'
    expose:
      - '9002'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8083'
      RPC_PORT: ':9002'
      RPC_SERVICES: 'STORES=stores:9009,CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=depot user=depot_user password=depot_pass search_path=depot,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  notifications:
    container_name: notifications
    hostname: notifications
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: notifications
    expose:
      - '9003'
    environment:
      ENVIRONMENT: development
      RPC_PORT: ':9003'
      RPC_SERVICES: 'CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=notifications user=notifications_user password=notifications_pass search_path=notifications,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  ordering:
    container_name: ordering
    hostname: ordering
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: ordering
    ports:
      - '8084:8084'
    expose:
      - '9004'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8084'
      RPC_PORT: ':9004'
      RPC_SERVICES: 'STORES=stores:9009,CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=ordering user=ordering_user password=ordering_pass search_path=ordering,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  payments:
    container_name: payments
    hostname: payments
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: payments
    ports:
      - '8085:8085'
    expose:
      - '9005'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8085'
      RPC_PORT: ':9005'
      RPC_SERVICES: 'STORES=stores:9009,CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=payments user=payments_user password=payments_pass search_path=payments,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  search:
    container_name: search
    hostname: search
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: search
    ports:
      - '8086:8086'
    expose:
      - '9006'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8086'
      RPC_PORT: ':9006'
      RPC_SERVICES: 'STORES=stores:9009,CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=search user=search_user password=search_pass search_path=search,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  stores:
    container_name: stores
    hostname: stores
    build:
      context: .
      dockerfile: docker/Dockerfile.microservices
      args:
        service: stores
    ports:
      - '8087:8087'
    expose:
      - '9009'
    environment:
      ENVIRONMENT: development
      WEB_PORT: ':8087'
      RPC_PORT: ':9009'
      RPC_SERVICES: 'STORES=stores:9009,CUSTOMERS=customers:9001'
      PG_CONN: host=postgres dbname=stores user=stores_user password=stores_pass search_path=stores,public
      NATS_URL: nats:4222
    depends_on:
      - nats
      - postgres
    command: [ "./wait-for", "postgres:5432", "--", "/mallbots/service" ]
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:12-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: itsasecret
    ports:
      - '5432:5432'
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
      - './docker/database:/docker-entrypoint-initdb.d'
  nats:
    container_name: nats
    hostname: nats
    image: nats:2-alpine
    ports:
      - '4222:4222'
    command:
      - -js
      - -sd
      - /var/lib/nats/data
    volumes:
      - 'jsdata:/var/lib/nats/data'
  pact:
    container_name: pact
    hostname: pact
    image: pactfoundation/pact-broker:2
    ports:
      - "9292:9292"
    depends_on:
      - postgres
    environment:
      PACT_BROKER_DATABASE_URL: "postgres://pactuser:pactpass@postgres/pactdb"
      PACT_BROKER_BASIC_AUTH_USERNAME: pactuser
      PACT_BROKER_BASIC_AUTH_PASSWORD: pactpass
      PACT_BROKER_ALLOW_PUBLIC_READ: true
      PACT_BROKER_DATABASE_CONNECT_MAX_RETRIES: 5
      PACT_BROKER_BASE_URL: 'http://localhost:9292 http://pact-broker:9292'

volumes:
  pgdata:
  jsdata:
